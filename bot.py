import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telebot.types import ReplyKeyboardRemove
import random
import logging
from settings import BOT_TOKEN
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)


class VocabularyBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ —Å –∏–Ω—ä–µ–∫—Ü–∏–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""

    def __init__(self, db):
        self.bot = telebot.TeleBot(BOT_TOKEN)
        self.db = db
        self.user_sessions = {}

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.register_handlers()

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        @self.bot.message_handler(commands=['start'])
        def handle_start(message):
            self.handle_start(message)

        @self.bot.message_handler(func=lambda message: True)
        def handle_message(message):
            self.handle_message(message)

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    def get_random_word(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
        words = self.db.get_all_words(user_id)
        return random.choice(words) if words else None

    def get_wrong_options(self, correct_answer, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
        words = self.db.get_all_words(user_id)
        english_words = [word[1] for word in words
                         if word[1].lower() != correct_answer.lower()]

        # –ï—Å–ª–∏ —Å–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if len(english_words) < 3:
            standard_options = [
                'apple',
                'book',
                'car',
                'dog',
                'cat',
                'house',
                'tree',
                'water'
                ]
            additional_options = [opt for opt in standard_options
                                  if opt.lower() != correct_answer.lower()]
            english_words.extend(additional_options)

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞
        english_words = list(set(english_words))
        return random.sample(english_words, min(3, len(english_words)))

    # –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    def create_main_keyboard(self):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        keyboard.add(
            KeyboardButton("–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üöÄ"),
            KeyboardButton("–ú–æ–∏ —Å–ª–æ–≤–∞ üìù"),
            KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä"),
            KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï"),
            KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô")
        )
        return keyboard

    def create_options_keyboard(self, options):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        for i in range(0, len(options), 2):
            if i + 1 < len(options):
                keyboard.add(KeyboardButton(options[i]),
                             KeyboardButton(options[i + 1]))
            else:
                keyboard.add(KeyboardButton(options[i]))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard.add(
            KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï"),
            KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô")
        )
        keyboard.add(KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†"))

        return keyboard

    def create_control_keyboard(self):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        keyboard.add(
            KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï"),
            KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô")
        )
        keyboard.add(KeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚û°Ô∏è"))
        keyboard.add(KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†"))
        return keyboard

    def create_stats_keyboard(self):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        keyboard.add(
            KeyboardButton("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà"),
            KeyboardButton("–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìÖ"),
            KeyboardButton("–ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìÜ")
        )
        keyboard.add(KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†"))
        return keyboard

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    def handle_start(self, message):
        welcome_text = """
–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.
–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.
–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä,
–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.
–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:

–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,
—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.

–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è
"""

        self.bot.send_message(message.chat.id, welcome_text,
                              reply_markup=self.create_main_keyboard())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")

    def handle_message(self, message):
        user_id = message.from_user.id
        text = message.text

        if text == "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üöÄ":
            self.ask_question(message.chat.id, user_id)
        elif text == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï":
            msg = self.bot.send_message(
                message.chat.id,
                """–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ - –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ\n
                –ù–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç–æ–ª - table""",
                reply_markup=ReplyKeyboardRemove()
            )
            self.bot.register_next_step_handler(msg, self.process_add_word,
                                                user_id)
        elif text == "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô":
            msg = self.bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=ReplyKeyboardRemove()
            )
            self.bot.register_next_step_handler(msg, self.process_delete_word,
                                                user_id)
        elif text == "–ú–æ–∏ —Å–ª–æ–≤–∞ üìù":
            self.show_my_words(message.chat.id, user_id)
        elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä":
            self.show_stats_options(message.chat.id)
        elif text == "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà":
            self.show_general_stats(message.chat.id, user_id)
        elif text == "–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìÖ":
            self.show_today_stats(message.chat.id, user_id)
        elif text == "–ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìÜ":
            self.show_weekly_stats(message.chat.id, user_id)
        elif text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†":
            self.bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                                  reply_markup=self.create_main_keyboard())
        elif text == "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚û°Ô∏è":
            self.ask_question(message.chat.id, user_id)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å
            if user_id in self.user_sessions and ('current_correct' in
                                                  self.user_sessions[user_id]):
                self.check_answer(message)
            else:
                self.bot.send_message(message.chat.id,
                                      "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                                      reply_markup=self.create_main_keyboard())

    def process_add_word(self, message, user_id):
        try:
            if ' - ' not in message.text:
                self.bot.send_message(message.chat.id,
                                      """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ -
                                      –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ""")
                self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                      reply_markup=self.create_main_keyboard())
                return

            russian, english = map(str.strip, message.text.split(' - ', 1))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ
            if self.db.word_exists(user_id, english):
                self.bot.send_message(message.chat.id,
                                      f"""–°–ª–æ–≤–æ '{english}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤
                                      –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ!""")
            else:
                if self.db.add_user_word(user_id, russian, english):
                    self.bot.send_message(message.chat.id,
                                          f"""–°–ª–æ–≤–æ '{russian} -
                                          {english}' –¥–æ–±–∞–≤–ª–µ–Ω–æ! ‚úÖ""")
                else:
                    self.bot.send_message(message.chat.id,
                                          """–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ.
                                          –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.""")

            self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                  reply_markup=self.create_main_keyboard())

        except Exception as e:
            self.bot.send_message(message.chat.id,
                                  """–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.
                                  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.""")
            logger.error(f"Error adding word: {e}")
            self.bot.send_message(message.chat.id,
                                  "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                  reply_markup=self.create_main_keyboard())

    def process_delete_word(self, message, user_id):
        english_word = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ª–æ–≤–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_words = self.db.get_user_words(user_id)
        user_english_words = [word['english'] for word in user_words]

        if english_word in user_english_words:
            if self.db.delete_user_word(user_id, english_word):
                self.bot.send_message(message.chat.id,
                                      f"–°–ª–æ–≤–æ '{english_word}' —É–¥–∞–ª–µ–Ω–æ! ‚úÖ")
            else:
                self.bot.send_message(message.chat.id,
                                      "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ.")
        else:
            self.bot.send_message(message.chat.id,
                                  f"""–°–ª–æ–≤–æ '{english_word}'
                                  –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ.""")

        self.bot.send_message(message.chat.id,
                              "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                              reply_markup=self.create_main_keyboard())

    def show_my_words(self, chat_id, user_id):
        user_words = self.db.get_user_words(user_id)
        if user_words:
            words_text = "üìù –í–∞—à–∏ —Å–ª–æ–≤–∞:\n\n"
            for i, word in enumerate(user_words, 1):
                accuracy = round(
                    (word['correct_answers'] / word['total_attempts'] * 100)
                    if word['total_attempts'] > 0
                    else 0,
                    1
                    )
                words_text += f"{i}. {word['russian']} - {word['english']}\n"
                words_text += (f"üìä –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {word['correct_answers']}/"
                               f"{word['total_attempts']} ({accuracy}%)\n\n")

            words_text += f"–í—Å–µ–≥–æ —Å–ª–æ–≤: {len(user_words)}"
            self.bot.send_message(chat_id, words_text)
        else:
            self.bot.send_message(chat_id,
                                  """–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≤–æ–∏—Ö —Å–ª–æ–≤.
                                  –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏
                                  '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'""")

        self.bot.send_message(chat_id,
                              "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                              reply_markup=self.create_main_keyboard())

    def show_stats_options(self, chat_id):
        self.bot.send_message(chat_id,
                              "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
                              reply_markup=self.create_stats_keyboard())

    def show_general_stats(self, chat_id, user_id):
        stats = self.db.get_user_stats(user_id)

        if stats:
            stats_text = f"""
üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üìù –í—Å–µ–≥–æ —Å–ª–æ–≤: {stats['total_words']}
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['total_correct']}/{stats['total_attempts']}
üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {stats['accuracy']}%
üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {stats['current_streak']} –¥–Ω–µ–π
üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {stats['max_streak']} –¥–Ω–µ–π
üìÖ –î–Ω–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏: {stats['total_practice_days']}
"""
            if stats['last_practice_date']:
                stats_text += f"""üìÜ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞:
                {stats['last_practice_date'].strftime('%d.%m.%Y')}"""
        else:
            stats_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!"

        self.bot.send_message(chat_id,
                              stats_text,
                              reply_markup=self.create_stats_keyboard())

    def show_today_stats(self, chat_id, user_id):
        today_stats = self.db.get_today_stats(user_id)

        stats_text = f"""
üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:
{today_stats['total_correct_today']}/{today_stats['total_attempts_today']}
"""
        if today_stats['total_attempts_today'] > 0:
            correct = today_stats['total_correct_today']
            attempts = today_stats['total_attempts_today']
            percentage = (correct / attempts * 100) if attempts > 0 else 0
            accuracy = round(percentage, 1)
            stats_text += f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy}%"
        else:
            stats_text += "–°–µ–≥–æ–¥–Ω—è –≤—ã –µ—â–µ –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª–∏—Å—å!"

        self.bot.send_message(chat_id,
                              stats_text,
                              reply_markup=self.create_stats_keyboard())

    def show_weekly_stats(self, chat_id, user_id):
        weekly_stats = self.db.get_weekly_stats(user_id)

        if weekly_stats:
            stats_text = "üìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
            for day in weekly_stats:
                stats_text += f"üìÖ {day['date'].strftime('%d.%m')}: "
                f"{day['correct_answers']}/{day['total_attempts']} "
                f"({day['accuracy']}%)\n"

            total_correct = sum(day['correct_answers'] for day in weekly_stats)
            total_attempts = sum(day['total_attempts'] for day in weekly_stats)
            weekly_accuracy = round(
                (total_correct / total_attempts * 100)
                if total_attempts > 0
                else 0,
                1
                )

            stats_text += f"""\nüìä –ò—Ç–æ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é:
            {total_correct}/{total_attempts} ({weekly_accuracy}%)"""
        else:
            stats_text = "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –±—ã–ª–æ."

        self.bot.send_message(chat_id, stats_text,
                              reply_markup=self.create_stats_keyboard())

    def ask_question(self, chat_id, user_id):
        word = self.get_random_word(user_id)
        if not word:
            self.bot.send_message(chat_id,
                                  """–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
                                  –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å–Ω–∞—á–∞–ª–∞.""")
            self.bot.send_message(chat_id,
                                  "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                  reply_markup=self.create_main_keyboard())
            return

        russian, correct_answer = word
        wrong_answers = self.get_wrong_options(correct_answer, user_id)

        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        options = wrong_answers + [correct_answer]
        random.shuffle(options)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_sessions[user_id] = {
            'current_correct': correct_answer,
            'current_russian': russian
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.bot.send_message(
            chat_id,
            f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ '{russian}'?",
            reply_markup=self.create_options_keyboard(options)
        )

    def check_answer(self, message):
        user_id = message.from_user.id
        user_answer = message.text

        if user_id not in self.user_sessions:
            self.bot.send_message(message.chat.id,
                                  "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                                  reply_markup=self.create_main_keyboard())
            return

        correct_answer = self.user_sessions[user_id]['current_correct']
        russian_word = self.user_sessions[user_id]['current_russian']
        is_correct = user_answer.lower() == correct_answer.lower()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.db.update_user_stats(user_id, is_correct)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ–≤–∞ (–µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–ª–æ–≤–æ)
        self.db.update_word_stats(user_id, correct_answer, is_correct)

        if is_correct:
            response_text = (f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ\n–°–ª–æ–≤–æ '{russian_word}' "
                             f"–ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ '{correct_answer}'")
            self.bot.send_message(message.chat.id,
                                  response_text,
                                  reply_markup=self.create_control_keyboard())
        else:
            response_text = (
                f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct_answer}'\n"
                f"–°–ª–æ–≤–æ '{russian_word}' –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ '{correct_answer}'"
            )
            self.bot.send_message(message.chat.id,
                                  response_text,
                                  reply_markup=self.create_control_keyboard())

        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        if user_id in self.user_sessions:
            del self.user_sessions[user_id]

    def run(self):
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db.init_database()
            print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
            self.bot.infinity_polling()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        finally:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            self.db.close()


def main():
    db = Database()
    bot = VocabularyBot(db)
    bot.run()


if __name__ == "__main__":
    main()
